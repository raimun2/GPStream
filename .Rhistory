#' @export
#'
read_stream <- function(filename){
# if file ends in "*fit.gz" or "kmz", then unzip it, maintaining the original file
if(length(grep(".fit.gz",filename))==1) {
R.utils::gunzip(filename, remove=FALSE, overwrite=TRUE)
filename <- gsub(".gz$","",filename) # remove ".gz" from filename
} else if(length(grep(".kmz",filename))==1){
tmpdir <- tempdir()
filename <- unzip(filename, exdir = tmpdir)
}
# if fit file (including uncompressed file) use FITfileR library
if(length(grep(".fit$",filename))==1){
file_data <- FITfileR::readFitFile(filename)
stream_df <- FITfileR::records(file_data)
if(!is.data.frame(stream_df)){
stream_df <-  plyr::rbind.fill(lapply(stream_df,function(y){as.data.frame((y))}))
}
} else if(length(grep(".gpx$",filename))==1) {
stream_df <- read_gpx(filename)
} else if(length(grep(".kml$",filename))==1) {
stream_df <- do.call("rbind", maptools::getKMLcoordinates(filename))
colnames(stream_df)[1:ncol(stream_df)] <- c("lon", "lat", "ele")[1:ncol(stream_df)]
} else if(length(grep(".tcx$",filename))==1) {
doc <- XML::xmlParse(filename)
nodes <- XML::getNodeSet(doc, "//ns:Trackpoint", "ns")
rows <-  lapply(nodes, function(x) data.frame(XML::xmlToList(x) ))
stream_df <- do.call("rbind", rows)
} else {
message("unsupported format, see https://www.alltrails.com/converter")
}
return(stream_df %>% tibble::as_tibble()) #return tibble with file stream
}
for(fil in testfiles){
stream <- read_stream(paste0(dir,fil))  %>% uniform_stream()
print(fil)
print(head(stream))
}
? R.utils::gunzip
testfiles <- list.files(dir)
for(fil in testfiles){
stream <- read_stream(paste0(dir,fil))  %>% uniform_stream()
print(fil)
print(head(stream))
}
#' files (.fit.gz) and compressed kml files (.kmz)
#'
#' Keeps the original variable names from the raw files
#'
#' @param filename The file path
#' read_stream()
#'
#' @return tibble with stream readings
#' @export
#'
read_stream <- function(filename){
# if file ends in "*fit.gz" or "kmz", then unzip it, maintaining the original file
if(length(grep(".fit.gz",filename))==1) {
tmpdir <- tempdir()
filename <- R.utils::gunzip(filename, remove=FALSE, overwrite=TRUE, exdir = tmpdir)
filename <- gsub(".gz$","",filename) # remove ".gz" from filename
} else if(length(grep(".kmz",filename))==1){
tmpdir <- tempdir()
filename <- unzip(filename, exdir = tmpdir)
}
# if fit file (including uncompressed file) use FITfileR library
if(length(grep(".fit$",filename))==1){
file_data <- FITfileR::readFitFile(filename)
stream_df <- FITfileR::records(file_data)
if(!is.data.frame(stream_df)){
stream_df <-  plyr::rbind.fill(lapply(stream_df,function(y){as.data.frame((y))}))
}
} else if(length(grep(".gpx$",filename))==1) {
stream_df <- read_gpx(filename)
} else if(length(grep(".kml$",filename))==1) {
stream_df <- do.call("rbind", maptools::getKMLcoordinates(filename))
colnames(stream_df)[1:ncol(stream_df)] <- c("lon", "lat", "ele")[1:ncol(stream_df)]
} else if(length(grep(".tcx$",filename))==1) {
doc <- XML::xmlParse(filename)
nodes <- XML::getNodeSet(doc, "//ns:Trackpoint", "ns")
rows <-  lapply(nodes, function(x) data.frame(XML::xmlToList(x) ))
stream_df <- do.call("rbind", rows)
} else {
message("unsupported format, see https://www.alltrails.com/converter")
}
return(stream_df %>% tibble::as_tibble()) #return tibble with file stream
}
for(fil in testfiles){
stream <- read_stream(paste0(dir,fil))  %>% uniform_stream()
print(fil)
print(head(stream))
}
#' files (.fit.gz) and compressed kml files (.kmz)
#'
#' Keeps the original variable names from the raw files
#'
#' @param filename The file path
#' read_stream()
#'
#' @return tibble with stream readings
#' @export
#'
read_stream <- function(filename){
# if file ends in "*fit.gz" or "kmz", then unzip it, maintaining the original file
if(length(grep(".fit.gz",filename))==1) {
tmpdir <- tempdir()
filename <- unzip(filename, exdir = tmpdir)
filename <- gsub(".gz$","",filename) # remove ".gz" from filename
} else if(length(grep(".kmz",filename))==1){
tmpdir <- tempdir()
filename <- unzip(filename, exdir = tmpdir)
}
# if fit file (including uncompressed file) use FITfileR library
if(length(grep(".fit$",filename))==1){
file_data <- FITfileR::readFitFile(filename)
stream_df <- FITfileR::records(file_data)
if(!is.data.frame(stream_df)){
stream_df <-  plyr::rbind.fill(lapply(stream_df,function(y){as.data.frame((y))}))
}
} else if(length(grep(".gpx$",filename))==1) {
stream_df <- read_gpx(filename)
} else if(length(grep(".kml$",filename))==1) {
stream_df <- do.call("rbind", maptools::getKMLcoordinates(filename))
colnames(stream_df)[1:ncol(stream_df)] <- c("lon", "lat", "ele")[1:ncol(stream_df)]
} else if(length(grep(".tcx$",filename))==1) {
doc <- XML::xmlParse(filename)
nodes <- XML::getNodeSet(doc, "//ns:Trackpoint", "ns")
rows <-  lapply(nodes, function(x) data.frame(XML::xmlToList(x) ))
stream_df <- do.call("rbind", rows)
} else {
message("unsupported format, see https://www.alltrails.com/converter")
}
return(stream_df %>% tibble::as_tibble()) #return tibble with file stream
}
for(fil in testfiles){
stream <- read_stream(paste0(dir,fil))  %>% uniform_stream()
print(fil)
print(head(stream))
}
testfiles <- list.files(dir)
for(fil in testfiles){
stream <- read_stream(paste0(dir,fil))  %>% uniform_stream()
print(fil)
print(head(stream))
}
fil
filename <- fil
filename <- unzip(filename, exdir = tmpdir)
tmpdir <- tempdir()
filename <- unzip(filename, exdir = tmpdir)
filename <- .utils::gunzip(filename, remove=FALSE, overwrite=TRUE, exdir = tmpdir)
filename <- utils::gunzip(filename, remove=FALSE, overwrite=TRUE, exdir = tmpdir)
filename <- R.utils::gunzip(filename, remove=FALSE, overwrite=TRUE, exdir = tmpdir)
R.utils::gunzip(filename, remove=FALSE, overwrite=TRUE, exdir = tmpdir)
filename <- fil
tmpdir <- tempdir()
filename <- R.utils::gunzip(filename, remove=FALSE, overwrite=TRUE, exdir = tmpdir)
filename
filename <- paste0(dir,fil)
tmpdir <- tempdir()
filename <- R.utils::gunzip(filename, remove=FALSE, overwrite=TRUE, exdir = tmpdir)
? gunzip
tmpdir <- tempdir()
filename <- R.utils::gunzip(filename, remove=FALSE, overwrite=TRUE, destname = tmpdir)
filename
paste0(tmpdir,fil)
fil
paste0(tmpdir,filename)
filename <- R.utils::gunzip(filename, remove=FALSE, overwrite=TRUE, destname = paste0(tmpdir,filename))
filename
filename <- gsub(".gz$","",filename) # remove ".gz" from filename
filename
file_data <- FITfileR::readFitFile(filename)
filename <- paste0(dir, fil)
tmpdir <- tempdir()
filename <- R.utils::gunzip(filename, remove=FALSE, overwrite=TRUE, destname = tmpdir)
filename <- paste0(dir, fil)
tempdir <- tempdir()
list.files(tempdir, full.names = T)
file.remove(list.files(tempdir, full.names = T))
tempfile <- file.path(tempdir,filename)
R.utils::gunzip(tempfile)
file.path(tempdir, filename)
download.file(filename, tempfile)
file.copy(from = filename,
to   = tempfile)
tempdir <- tempdir()
tempfile <- file.path(tempdir, filename)
file.copy(from = filename,
to   = tempfile)
?dirname
dirname(filename)
basename(filename)
filename <- paste0(dir, fil)
tempdir <- tempdir()
file.remove(list.files(tempdir, full.names = T))
tempfile <- file.path(tempdir,  basename(filename))
file.copy(from = filename,
to   = tempfile)
R.utils::gunzip(tempfile)
list.files(tempdir, full.names = T)
gsub(".gz$","",tempdir)
gsub(".gz$","",basename(filename))
filename <- # remove ".gz" from filename
list.files(tempdir, gsub(".gz$","",basename(filename)) , full.names = T)
# if fit file (including uncompressed file) use FITfileR library
if(length(grep(".fit$",filename))==1){
file_data <- FITfileR::readFitFile(filename)
stream_df <- FITfileR::records(file_data)
if(!is.data.frame(stream_df)){
stream_df <-  plyr::rbind.fill(lapply(stream_df,function(y){as.data.frame((y))}))
}
} else if(length(grep(".gpx$",filename))==1) {
stream_df <- read_gpx(filename)
} else if(length(grep(".kml$",filename))==1) {
stream_df <- do.call("rbind", maptools::getKMLcoordinates(filename))
colnames(stream_df)[1:ncol(stream_df)] <- c("lon", "lat", "ele")[1:ncol(stream_df)]
} else if(length(grep(".tcx$",filename))==1) {
doc <- XML::xmlParse(filename)
nodes <- XML::getNodeSet(doc, "//ns:Trackpoint", "ns")
rows <-  lapply(nodes, function(x) data.frame(XML::xmlToList(x) ))
stream_df <- do.call("rbind", rows)
} else {
message("unsupported format, see https://www.alltrails.com/converter")
}
#' files (.fit.gz) and compressed kml files (.kmz)
#'
#' Keeps the original variable names from the raw files
#'
#' @param filename The file path
#' read_stream()
#'
#' @return tibble with stream readings
#' @export
#'
read_stream <- function(filename){
# if file ends in "*fit.gz" or "kmz", then unzip it, maintaining the original file
if(length(grep(".fit.gz",filename))==1) {
tempdir <- tempdir()
tempfile <- file.path(tempdir,  basename(filename))
file.copy(from = filename, to   = tempfile)
R.utils::gunzip(tempfile)
filename <- list.files(tempdir, gsub(".gz$","",basename(filename)) , full.names = T)
} else if(length(grep(".kmz",filename))==1){
tmpdir <- tempdir()
filename <- unzip(filename, exdir = tmpdir)
}
# if fit file (including uncompressed file) use FITfileR library
if(length(grep(".fit$",filename))==1){
file_data <- FITfileR::readFitFile(filename)
stream_df <- FITfileR::records(file_data)
if(!is.data.frame(stream_df)){
stream_df <-  plyr::rbind.fill(lapply(stream_df,function(y){as.data.frame((y))}))
}
} else if(length(grep(".gpx$",filename))==1) {
stream_df <- read_gpx(filename)
} else if(length(grep(".kml$",filename))==1) {
stream_df <- do.call("rbind", maptools::getKMLcoordinates(filename))
colnames(stream_df)[1:ncol(stream_df)] <- c("lon", "lat", "ele")[1:ncol(stream_df)]
} else if(length(grep(".tcx$",filename))==1) {
doc <- XML::xmlParse(filename)
nodes <- XML::getNodeSet(doc, "//ns:Trackpoint", "ns")
rows <-  lapply(nodes, function(x) data.frame(XML::xmlToList(x) ))
stream_df <- do.call("rbind", rows)
} else {
message("unsupported format, see https://www.alltrails.com/converter")
}
return(stream_df %>% tibble::as_tibble()) #return tibble with file stream
}
testfiles <- list.files(dir)
testfiles <- list.files(dir)
for(fil in testfiles){
stream <- read_stream(paste0(dir,fil))  %>% uniform_stream()
print(fil)
print(head(stream))
}
#' files (.fit.gz) and compressed kml files (.kmz)
#'
#' Keeps the original variable names from the raw files
#'
#' @param filename The file path
#' read_stream()
#'
#' @return tibble with stream readings
#' @export
#'
read_stream <- function(filename){
# if file ends in "*fit.gz" or "kmz", then unzip it, maintaining the original file
if(length(grep(".fit.gz",filename))==1) {
tempdir <- tempdir()
tempfile <- file.path(tempdir,  basename(filename))
file.copy(from = filename, to   = tempfile)
R.utils::gunzip(tempfile, overwrite = TRUE)
filename <- list.files(tempdir, gsub(".gz$","",basename(filename)) , full.names = T)
} else if(length(grep(".kmz",filename))==1){
tmpdir <- tempdir()
filename <- unzip(filename, exdir = tmpdir)
}
# if fit file (including uncompressed file) use FITfileR library
if(length(grep(".fit$",filename))==1){
file_data <- FITfileR::readFitFile(filename)
stream_df <- FITfileR::records(file_data)
if(!is.data.frame(stream_df)){
stream_df <-  plyr::rbind.fill(lapply(stream_df,function(y){as.data.frame((y))}))
}
} else if(length(grep(".gpx$",filename))==1) {
stream_df <- read_gpx(filename)
} else if(length(grep(".kml$",filename))==1) {
stream_df <- do.call("rbind", maptools::getKMLcoordinates(filename))
colnames(stream_df)[1:ncol(stream_df)] <- c("lon", "lat", "ele")[1:ncol(stream_df)]
} else if(length(grep(".tcx$",filename))==1) {
doc <- XML::xmlParse(filename)
nodes <- XML::getNodeSet(doc, "//ns:Trackpoint", "ns")
rows <-  lapply(nodes, function(x) data.frame(XML::xmlToList(x) ))
stream_df <- do.call("rbind", rows)
} else {
message("unsupported format, see https://www.alltrails.com/converter")
}
return(stream_df %>% tibble::as_tibble()) #return tibble with file stream
}
for(fil in testfiles){
stream <- read_stream(paste0(dir,fil))  %>% uniform_stream()
print(fil)
print(head(stream))
}
? gunzip
testfiles[2]
gzip(testfiles[2], ext="gz", FUN=gzfile)
R.utils::gzip(testfiles[2], ext="gz", FUN=gzfile)
R.utils::gzip(paste0(dir,testfiles[2]), ext="gz", FUN=gzfile)
dir <- "inst/extdata/"
testfiles <- list.files(dir)
strs <- NULL
testfiles <- list.files(dir)
strs <- NULL
for(fil in testfiles){
stream <- read_stream(paste0(dir,fil))  %>% uniform_stream()
strs <- plyr::rbind.fill(strs, stream)
}
View(strs)
strs <- NULL
for(fil in testfiles){
stream <- read_stream(paste0(dir,fil))  %>% uniform_stream()
stream$file <- fil
strs <- plyr::rbind.fill(strs, stream)
}
ggplot(strs, aes(lon, lat, col=fil)) + geom_point
ggplot(strs, aes(lon, lat, col=fil)) + geom_point()
fil
strs <- NULL
for(fil in testfiles){
stream <- read_stream(paste0(dir,fil))  %>% uniform_stream()
stream$file <- fil
strs <- plyr::rbind.fill(strs, stream)
}
strs$file %>% table()
ggplot(strs, aes(lon, lat, col=file)) + geom_point()
library(GPStream)
library(GPStream)
library(GPStream)
library(GPStream)
strava_metadata
gpx_stream <- read_stream("inst/extdata/gpx_activity.gpx")
library(GPStream)
gpx_stream <- read_stream("inst/extdata/gpx_activity.gpx")
fit_stream <- read_stream("inst/extdata/fit_activity.fit")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(tidyverse)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(tidyverse)
library(GPStream)
act_streams <- strava_streams
str(act_streams)
gpx_stream <- read_stream("inst/extdata/gpx_activity.gpx")
str(gpx_stream)
fit_stream <- read_stream("inst/extdata/fit_activity.fit")
fit_stream <- read_stream("inst/extdata/fit_activity.fit")
str(fit_stream)
clean_stream1 <- act_streams %>% uniform_stream()
clean_stream2 <- gpx_stream %>% uniform_stream()
clean_stream3 <- fit_stream %>% uniform_stream()
str(clean_stream2)
correct_elevation <- clean_stream2 %>% ele_correction(replace = FALSE)
correct_elevation <- clean_stream2 %>% ele_correction(replace = FALSE)
ggplot(correct_elevation, aes(x=time)) +
geom_line(aes(y=ele)) +
geom_line(aes(y=ele_DEM), col="red")
? ele_correction
correct_elevation <- clean_stream2 %>% ele_correction(replace = FALSE, z = 15)
correct_elevation <- clean_stream2 %>% ele_correction(replace = FALSE, z = 14)
ggplot(correct_elevation, aes(x=time)) +
geom_line(aes(y=ele)) +
geom_line(aes(y=ele_DEM), col="red")
smooth_act <- correct_elevation %>% smooth_stream(interpolate = TRUE, alpha = 0.01)
ggplot(correct_elevation, aes(lon, lat)) +
geom_point() +
geom_point(data = smooth_act, col="red")
diff_stream <- smooth_act %>% differential_stream()
str(diff_stream)
clean_stream <-
read_stream("inst/extdata/fit_activity.fit") %>%
uniform_stream() %>%
ele_correction(replace = FALSE) %>%
smooth_stream(interpolate = FALSE, alpha = 0.05, replace = FALSE) %>%
differential_stream()
ggplot(clean_stream, aes(lon,lat)) +
geom_point(aes(size=hz_velocity, col=vert_velocity))
ggplot(clean_stream, aes(lon,lat)) +
geom_point(aes(size=hz_velocity, col=vert_velocity)) +
scale_color_viridis_c()
ggplot(clean_stream, aes(lon,lat)) +
geom_point(aes(size=vert_velocity, col=hz_velocity)) +
scale_color_viridis_c()
ggplot(clean_stream, aes(lon,lat)) +
geom_point(aes(size=azimuth, col=hz_velocity)) +
scale_color_viridis_c()
ggplot(clean_stream, aes(lon,lat)) +
geom_point(aes(size=slope, col=hz_velocity)) +
scale_color_viridis_c()
ggplot(clean_stream, aes(lon,lat)) +
geom_point(aes(size=abs(slope), col=hz_velocity)) +
scale_color_viridis_c()
pacman::p_load(tidyverse, googlePolylines, GPStream)
? ele_correction
pacman::p_load(tidyverse, googlePolylines, GPStream)
## genera samples
todo_strava <- read_rds("C:/Users/raimu/Dropbox/Github/30DayMapChallenge/data/streams_rai1058.rds")
mqhue <- todo_strava$act_data[grepl("manquehue",todo_strava$act_data$name),]
strava_metadata <- mqhue %>% filter(total_elevation_gain > 800, total_elevation_gain<1000, distance < 12)
strava_streams <- todo_strava$streams %>% filter(id %in% strava_metadata$id)
max(strava_metadata$id)
ggplot(strava_streams, aes(lng, lat)) + geom_point()
strava_metadata <- mqhue %>% filter(total_elevation_gain > 800, total_elevation_gain<1000, distance < 10)
strava_streams <- todo_strava$streams %>% filter(id %in% strava_metadata$id)
ggplot(strava_streams, aes(lng, lat)) + geom_point()
strava_metadata <- mqhue %>% filter(total_elevation_gain > 800, total_elevation_gain<1000, distance < 9)
strava_metadata <- mqhue %>% filter(total_elevation_gain > 800, total_elevation_gain<1000, distance < 10)
strava_metadata <- mqhue %>% filter(total_elevation_gain > 850, total_elevation_gain<1000, distance < 10)
strava_streams <- todo_strava$streams %>% filter(id %in% strava_metadata$id)
ggplot(strava_streams, aes(lng, lat)) + geom_point()
strava_metadata <- mqhue %>% filter(total_elevation_gain > 900, total_elevation_gain<1000, distance < 10)
strava_streams <- todo_strava$streams %>% filter(id %in% strava_metadata$id)
strava_metadata <- mqhue %>% filter(total_elevation_gain > 850, total_elevation_gain<950, distance < 10)
strava_metadata <- mqhue %>% filter(total_elevation_gain > 850, total_elevation_gain<900, distance < 10)
strava_streams <- todo_strava$streams %>% filter(id %in% strava_metadata$id)
ggplot(strava_streams, aes(lng, lat)) + geom_point()
strava_metadata <- mqhue %>% filter(total_elevation_gain > 850, total_elevation_gain<1000, distance < 10)
strava_streams <- todo_strava$streams %>% filter(id %in% strava_metadata$id)
ggplot(strava_streams, aes(lng, lat)) + geom_point()
strava_metadata <- mqhue %>% filter(total_elevation_gain > 850, total_elevation_gain<1000, distance < 9.5)
strava_streams <- todo_strava$streams %>% filter(id %in% strava_metadata$id)
ggplot(strava_streams, aes(lng, lat)) + geom_point()
ggplot(strava_streams, aes(lng, lat)) + geom_point()
bicis <- todo_strava$act_data[todo_strava$act_data$type == "Ride",]
rides_streams <-  todo_strava$streams %>% filter(id %in% bicis$id)
ggplot(rides_streams, aes(lng, lat)) + geom_point()
bicis <- todo_strava$act_data[todo_strava$act_data$type == "Ride",] %>%
filter(distance > 10)
rides_streams <-  todo_strava$streams %>% filter(id %in% bicis$id)
ggplot(rides_streams, aes(lng, lat)) + geom_point()
bicis <- todo_strava$act_data[todo_strava$act_data$type == "Ride",] %>%
filter(distance > 10 & distance < 30)
rides_streams <-  todo_strava$streams %>% filter(id %in% bicis$id)
ggplot(rides_streams, aes(lng, lat)) + geom_point()
View(bicis)
bicis <- todo_strava$act_data[todo_strava$act_data$type == "Ride",] %>% drop_na(average_temp) %>%
filter(distance > 10 & distance < 30)
View(bicis)
rides_streams <-  todo_strava$streams %>% filter(id %in% bicis$id)
ggplot(rides_streams, aes(lng, lat)) + geom_point()
bicis <- todo_strava$act_data[todo_strava$act_data$type == "Ride",] %>% drop_na(average_temp) %>%
filter(distance > 15 & distance < 30)
rides_streams <-  todo_strava$streams %>% filter(id %in% bicis$id)
ggplot(rides_streams, aes(lng, lat)) + geom_point()
strava_metadata <- mqhue %>% filter(total_elevation_gain > 850, total_elevation_gain<1000, distance < 9.5, elapsed_time > 4000)
bicis <- todo_strava$act_data[todo_strava$act_data$type == "Ride",] %>% drop_na(average_temp) %>%
filter(distance > 15 & distance < 30)
rides_streams <-  todo_strava$streams %>% filter(id %in% bicis$id)
ggplot(rides_streams, aes(lng, lat)) + geom_point()
bicis <- todo_strava$act_data[todo_strava$act_data$type == "Ride",] %>% drop_na(average_temp) %>%
filter(distance > 15 & distance < 30, elapsed_time > 4000)
rides_streams <-  todo_strava$streams %>% filter(id %in% bicis$id)
ggplot(rides_streams, aes(lng, lat)) + geom_point()
strava_metadata <- mqhue %>% filter(total_elevation_gain > 850, total_elevation_gain<1000, distance < 10)
View(strava_metadata)
strava_metadata <- mqhue %>% filter(total_elevation_gain > 850, total_elevation_gain<1000, distance < 9.55)
strava_metadata <- rbind(strava_metadata, bicis)
pacman::p_load(tidyverse, googlePolylines, GPStream)
## genera samples
todo_strava <- read_rds("C:/Users/raimu/Dropbox/Github/30DayMapChallenge/data/streams_rai1058.rds")
mqhue <- todo_strava$act_data[grepl("manquehue",todo_strava$act_data$name),]
strava_metadata <- mqhue %>% filter(total_elevation_gain > 850, total_elevation_gain<1000, distance < 9.55)
bicis <- todo_strava$act_data[todo_strava$act_data$type == "Ride",] %>% drop_na(average_temp) %>%
filter(distance > 15 & distance < 30, elapsed_time > 4000)
rides_streams <-  todo_strava$streams %>% filter(id %in% bicis$id)
#ggplot(rides_streams, aes(lng, lat)) + geom_point()
strava_streams <- todo_strava$streams %>% filter(id %in% strava_metadata$id)
strava_metadata <- rbind(strava_metadata, bicis)
strava_streams <- rbind(strava_streams, rides_streams)
ggplot(strava_streams, aes(lng, lat)) + geom_point()
usethis::use_data(strava_metadata, overwrite = TRUE)
usethis::use_data(strava_streams, overwrite = TRUE)
