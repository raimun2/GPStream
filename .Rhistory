devtools::create("GPStream")
library(devtools)
build()
install()
create_package()
use_readme_rmd()
library(devtools)
use_readme_rmd()
library(GPStream)
library(GPStream)
library(GPStream)
library(GPStream)
load_sream_file()
load_stream_file()
? load_stream_file
library(GPStream)
library(GPStream)
load_stream_file("hola.")
read_stream_file("hola.")
library(GPStream)
read_stream_file("hola.")
?agregate
?aggregate
?get_elev_point
my.data <- readRDS("data/strava_metadata.rda")
library(tidyverse)
write_rds(my.data, "data/strava_metadata.rds")
my.data <- readRDS("data/strava_streams.rda")
write_rds(my.data, "data/strava_streams.rds")
install.packages("Rtools")
library(GPStream)
aa <- readRDS("data/strava_metadata.rds")
saveRDS(aa,"data/strava_metadata.RData")
aa <- readRDS("data/strava_streams.rds")
saveRDS(aa,"data/strava_streams.RData")
aa <- readRDS("data/strava_streams.RData")
saveRDS(aa,"data/strava_streams.RData", version=2)
aa <- readRDS("data/strava_metadata.rds")
saveRDS(aa,"data/strava_metadata.RData", version=2)
aa <- readRDS("data/strava_metadata.RData")
saveRDS(aa,"data/strava_metadata.RData", version=2)
aa <- readRDS("data/strava_streams.RData")
saveRDS(aa,"data/strava_streams.RData", version=2)
aa <- readRDS("data/strava_metadata.RData")
saveRDS(aa,"data/strava_metadata.RData", version=2)
aa <- readRDS("data/strava_streams.rds")
saveRDS(aa,"data/strava_streams.RData", version=2)
aa <- readRDS("data/strava_metadata.rds")
saveRDS(aa,"data/strava_metadata.RData", version=2)
devtools::use_data(aa, internal = TRUE)
aa <- readRDS("data/strava_streams.rds")
ab <- readRDS("data/strava_metadata.rds")
dput(aa, "data/strava_streams.rda")
dput(ab, "data/strava_metadata.rda")
tools::resaveRdaFiles()
tools::resaveRdaFiles("data")
library(tidyverse)
write_rds(aa, "data/strava_streams.rda", version = 2)
write_rds(ab, "data/strava_metadata.rda", version = 2)
devtools::use_data(aa, internal = TRUE)
? version
write.csv(aa, file="data/strava_streams.rda")
write.csv(ab, file="data/strava_metadata.rda")
write.csv(aa, file="data/strava_streams.rdata")
write.csv(ab, file="data/strava_metadata.rdata")
View(ab)
View(aa)
dput(aa, "data/strava_streams.rda")
dput(ab, "data/strava_metadata.rda")
dput(ab, "data/strava_metadata.rda")
? dput
dput(aa, "data/strava_streams.rda", control="all")
dput(ab, "data/strava_metadata.rda", control = "all")
? saveRDS
? load_data
load_data()
pkgload::load_data()
saveRDS(aa,"data/strava_streams.RData", version=2)
saveRDS(ab,"data/strava_metadata.RData", version=2)
pkgload::load_data()
saveRDS(aa,"data/strava_streams.RData")
saveRDS(ab,"data/strava_metadata.RData")
pkgload::load_data()
load("data/strava_metadata.rdata")
? load
save(aa, "data/strava_streams.rda")
save(aa, file = "data/strava_streams.rda")
save(ab, file = "data/strava_metadata.rda")
load("data/strava_streams.rda")
load("data/strava_metadata.rda")
load("data/strava_streams.rda")
load("data/strava_metadata.rda")
strava_streams <- aa
strava_metadata <- ab
save(strava_metadata, file = "data/strava_metadata.rda")
save(strava_streams, file = "data/strava_streams.rda")
save(strava_metadata, file = "data/strava_metadata.rda")
load("data/strava_streams.rda")
load("data/strava_metadata.rda")
View(strava_streams)
library(GPStream)
library(GPStream)
library(GPStream)
Esta es una librería de uso público para análisis de datos de recorridos deportivos. Se podrán encontrar funciones para cargar los datos, procesarlos, corregir la elevación de un recorrido, entre otros. (AGREGAR FUNCIONES MÁS IMPORTANTES). Para la captura de datos se utilizo la librería de _rStrava_. <https://github.com/fawda123/rStrava>
knitr::opts_chunk$set(echo = TRUE)
```{r}
```{r message=FALSE, eval=FALSE}
install.packages('devtools')
install.packages('devtools')
install.packages("devtools")
devtools::install_github('raimun2/GPStream')
summary(data)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
```{r, echo=FALSE}
```{r cars, echo=FALSE}
```{r cars, echo=FALSE}
install.packages('devtools')
install.packages("devtools")
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github('raimun2/GPStream')
install.packages("plotKML")
devtools::install_github('raimun2/GPStream')
load("C:/Users/raimu/Dropbox/Github/GPStream/data/strava_streams.rda")
View(strava_streams)
gpxs <- list.files("GPXprueba", "*.gpx")
gpxs <- list.files("GPXprueba", "*.gpx")
? htmlTreeParse
? readOGR
gpxs <- paste0("GPXprueba/",list.files("GPXprueba", "*.gpx"))
for(filename in gpxs){
}
print(filename)
tryCatch(
{file1 <- rgdal::readOGR(filename) %>% coordinates() %>% data.frame()},
error = function(cond){
print(filename)
})
for(filename in gpxs){
tryCatch(
{file1 <- rgdal::readOGR(filename) %>% coordinates() %>% data.frame()},
error = function(cond){
print(filename)
})
)
}
for(filename in gpxs){
tryCatch(
{
file1 <- rgdal::readOGR(filename) %>% coordinates() %>% data.frame()
},
error = function(cond){
print(filename)
})
}
file1 <- rgdal::readOGR(filename)
file1 <-  tryCatch(
{
rgdal::readOGR(filename)
},
error = function(cond){
print(filename)
})
for(filename in gpxs){
file1 <-  tryCatch(
{
rgdal::readOGR(filename)
},
error = function(cond){
print(filename)
})
}
message(filename)
gpxs <- paste0("GPXprueba/",list.files("GPXprueba", "*.gpx"))
for(filename in gpxs){
file1 <-  tryCatch(
{
rgdal::readOGR(filename)
},
error = function(cond){
message(filename)
})
}
for(filename in gpxs){
file1 <-  tryCatch(
{
plotKML::readGPX(filename)
},
error = function(cond){
message(filename)
})
}
XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
for(filename in gpxs){
file1 <-  tryCatch(
{
XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
},
error = function(cond){
message(filename)
})
}
filename = "GPXprueba/r3.gpx"
file1 <-  tryCatch(
{
XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
},
error = function(cond){
message(filename)
})
file1
file <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
XML::xpathSApply(pfile, path = "//trkpt", xmlAttrs)
XML::xpathSApply(pfile, path = "//trkpt", XML::xmlAttrs)
as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue))
gpxs
gpxs[7]
filename <- gpxs[7]
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue))
XML::xpathSApply(pfile, path = "//trkpt", XML::xmlAttrs)
pfile
XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue)
filename = "GPXprueba/r3.gpx"
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
ele <-    XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue)
time <-   XML::xpathSApply(pfile, path = "//trkpt/time", XML::xmlValue)
coords <- XML::xpathSApply(pfile, path = "//trkpt", XML::xmlAttrs)
ele <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue))
length(ele)
length(ele)>0
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue))
times <-   XML::xpathSApply(pfile, path = "//trkpt/time", XML::xmlValue)
coords <- XML::xpathSApply(pfile, path = "//trkpt", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
geodf <- data.frame(lat = lats, lon = lons)
if(length(eles)>0){
geodf$ele = eles
}
length(times)>0
filename <- gpxs[7]
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue))
times <-   XML::xpathSApply(pfile, path = "//trkpt/time", XML::xmlValue)
coords <- XML::xpathSApply(pfile, path = "//trkpt", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
stream <- data.frame(lat = lats, lon = lons)
if(length(eles)>0){
stream$ele = eles
}
if(length(times)>0){
stream$time = times
}
View(stream)
str(stream)
times <-   lubridate::as_datetime(XML::xpathSApply(pfile, path = "//trkpt/time", XML::xmlValue))
read_GPX <- function(filename){
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue))
times <-   lubridate::as_datetime(XML::xpathSApply(pfile, path = "//trkpt/time", XML::xmlValue))
coords <- XML::xpathSApply(pfile, path = "//trkpt", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
stream <- data.frame(lat = lats, lon = lons)
if(length(eles)>0){
stream$ele = eles
}
if(length(times)>0){
stream$time = times
}
return(stream)
}
filename = "GPXprueba/r3.gpx"
read_GPX <- function(filename){
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue))
times <-   lubridate::as_datetime(XML::xpathSApply(pfile, path = "//trkpt/time", XML::xmlValue))
coords <- XML::xpathSApply(pfile, path = "//trkpt", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
stream <- data.frame(lat = lats, lon = lons)
if(length(eles)>0){
stream$ele = eles
}
if(length(times)>0){
stream$time = times
}
return(stream)
}
filename = "GPXprueba/r3.gpx"
file2 <- read_GPX(filename)
read_GPX <- function(filename){
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue))
times <-   XML::xpathSApply(pfile, path = "//trkpt/time", XML::xmlValue)
coords <- XML::xpathSApply(pfile, path = "//trkpt", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
stream <- data.frame(lat = lats, lon = lons)
if(length(eles)>0){
stream$ele = eles
}
if(length(times)>0){
stream$time = lubridate::as_datetime(times)
}
return(stream)
}
file2 <- read_GPX(filename)
View(file2)
filename <- gpxs[7]
file2 <- read_GPX(filename)
View(file2)
for(filename in gpxs){
file1 <-  tryCatch(
{
read_GPX(filename)
},
error = function(cond){
message(filename)
})
}
filename = "GPXprueba/r2.gpx"
file2 <- read_GPX(filename)
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
pfile
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue))
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele|//rtept/ele", XML::xmlValue))
read_GPX <- function(filename){
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//(trkpt|rtept)/ele", XML::xmlValue))
times <-   XML::xpathSApply(pfile, path = "//(trkpt|rtept)/time", XML::xmlValue)
coords <- XML::xpathSApply(pfile, path = "//(trkpt|rtept)", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
stream <- data.frame(lat = lats, lon = lons)
if(length(eles)>0){
stream$ele = eles
}
if(length(times)>0){
stream$time = lubridate::as_datetime(times)
}
return(stream)
}
read_GPX(filename)
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//(trkpt|rtept)/ele", XML::xmlValue))
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele|//rtept/ele", XML::xmlValue))
coords <- XML::xpathSApply(pfile, path = "//trkpt|//rtept", XML::xmlAttrs)
read_GPX <- function(filename){
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele|//rtept/ele", XML::xmlValue))
times <-   XML::xpathSApply(pfile, path = "//trkpt/time|//rtept/time", XML::xmlValue)
coords <- XML::xpathSApply(pfile, path = "//trkpt|//rtept", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
stream <- data.frame(lat = lats, lon = lons)
if(length(eles)>0){
stream$ele = eles
}
if(length(times)>0){
stream$time = lubridate::as_datetime(times)
}
return(stream)
}
file1 <-  tryCatch(
{
read_GPX(filename)
},
error = function(cond){
message(filename)
})
gpxs <- paste0("GPXprueba/",list.files("GPXprueba", "*.gpx"))
for(filename in gpxs){
file1 <-  tryCatch(
{
read_GPX(filename)
},
error = function(cond){
message(filename)
})
}
file_data <- read_GPX(filename)
filename = "GPXprueba/r7.gpx"
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele|//rtept/ele", XML::xmlValue))
times <-   XML::xpathSApply(pfile, path = "//trkpt/time|//rtept/time", XML::xmlValue)
coords <- XML::xpathSApply(pfile, path = "//trkpt|//rtept", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
stream <- data.frame(lat = lats, lon = lons)
if(length(eles)>0){
stream$ele = eles
}
pfile
length(eles)
length(eles) == length(lats)
read_GPX <- function(filename){
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele|//rtept/ele", XML::xmlValue))
times <-   XML::xpathSApply(pfile, path = "//trkpt/time|//rtept/time", XML::xmlValue)
coords <- XML::xpathSApply(pfile, path = "//trkpt|//rtept", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
stream <- data.frame(lat = lats, lon = lons)
if(length(eles) == length(lats)){
stream$ele = eles
}
if(length(times) == length(lats)){
stream$time = lubridate::as_datetime(times)
}
return(stream)
}
gpxs <- paste0("GPXprueba/",list.files("GPXprueba", "*.gpx"))
for(filename in gpxs){
file1 <-  tryCatch(
{
read_GPX(filename)
},
error = function(cond){
message(filename)
})
}
library(GPStream)
