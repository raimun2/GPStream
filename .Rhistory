error = function(...) { },
useInternalNodes = T)
ele <-    XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue)
time <-   XML::xpathSApply(pfile, path = "//trkpt/time", XML::xmlValue)
coords <- XML::xpathSApply(pfile, path = "//trkpt", XML::xmlAttrs)
ele <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue))
length(ele)
length(ele)>0
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue))
times <-   XML::xpathSApply(pfile, path = "//trkpt/time", XML::xmlValue)
coords <- XML::xpathSApply(pfile, path = "//trkpt", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
geodf <- data.frame(lat = lats, lon = lons)
if(length(eles)>0){
geodf$ele = eles
}
length(times)>0
filename <- gpxs[7]
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue))
times <-   XML::xpathSApply(pfile, path = "//trkpt/time", XML::xmlValue)
coords <- XML::xpathSApply(pfile, path = "//trkpt", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
stream <- data.frame(lat = lats, lon = lons)
if(length(eles)>0){
stream$ele = eles
}
if(length(times)>0){
stream$time = times
}
View(stream)
str(stream)
times <-   lubridate::as_datetime(XML::xpathSApply(pfile, path = "//trkpt/time", XML::xmlValue))
read_GPX <- function(filename){
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue))
times <-   lubridate::as_datetime(XML::xpathSApply(pfile, path = "//trkpt/time", XML::xmlValue))
coords <- XML::xpathSApply(pfile, path = "//trkpt", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
stream <- data.frame(lat = lats, lon = lons)
if(length(eles)>0){
stream$ele = eles
}
if(length(times)>0){
stream$time = times
}
return(stream)
}
filename = "GPXprueba/r3.gpx"
read_GPX <- function(filename){
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue))
times <-   lubridate::as_datetime(XML::xpathSApply(pfile, path = "//trkpt/time", XML::xmlValue))
coords <- XML::xpathSApply(pfile, path = "//trkpt", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
stream <- data.frame(lat = lats, lon = lons)
if(length(eles)>0){
stream$ele = eles
}
if(length(times)>0){
stream$time = times
}
return(stream)
}
filename = "GPXprueba/r3.gpx"
file2 <- read_GPX(filename)
read_GPX <- function(filename){
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue))
times <-   XML::xpathSApply(pfile, path = "//trkpt/time", XML::xmlValue)
coords <- XML::xpathSApply(pfile, path = "//trkpt", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
stream <- data.frame(lat = lats, lon = lons)
if(length(eles)>0){
stream$ele = eles
}
if(length(times)>0){
stream$time = lubridate::as_datetime(times)
}
return(stream)
}
file2 <- read_GPX(filename)
View(file2)
filename <- gpxs[7]
file2 <- read_GPX(filename)
View(file2)
for(filename in gpxs){
file1 <-  tryCatch(
{
read_GPX(filename)
},
error = function(cond){
message(filename)
})
}
filename = "GPXprueba/r2.gpx"
file2 <- read_GPX(filename)
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
pfile
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele", XML::xmlValue))
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele|//rtept/ele", XML::xmlValue))
read_GPX <- function(filename){
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//(trkpt|rtept)/ele", XML::xmlValue))
times <-   XML::xpathSApply(pfile, path = "//(trkpt|rtept)/time", XML::xmlValue)
coords <- XML::xpathSApply(pfile, path = "//(trkpt|rtept)", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
stream <- data.frame(lat = lats, lon = lons)
if(length(eles)>0){
stream$ele = eles
}
if(length(times)>0){
stream$time = lubridate::as_datetime(times)
}
return(stream)
}
read_GPX(filename)
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//(trkpt|rtept)/ele", XML::xmlValue))
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele|//rtept/ele", XML::xmlValue))
coords <- XML::xpathSApply(pfile, path = "//trkpt|//rtept", XML::xmlAttrs)
read_GPX <- function(filename){
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele|//rtept/ele", XML::xmlValue))
times <-   XML::xpathSApply(pfile, path = "//trkpt/time|//rtept/time", XML::xmlValue)
coords <- XML::xpathSApply(pfile, path = "//trkpt|//rtept", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
stream <- data.frame(lat = lats, lon = lons)
if(length(eles)>0){
stream$ele = eles
}
if(length(times)>0){
stream$time = lubridate::as_datetime(times)
}
return(stream)
}
file1 <-  tryCatch(
{
read_GPX(filename)
},
error = function(cond){
message(filename)
})
gpxs <- paste0("GPXprueba/",list.files("GPXprueba", "*.gpx"))
for(filename in gpxs){
file1 <-  tryCatch(
{
read_GPX(filename)
},
error = function(cond){
message(filename)
})
}
file_data <- read_GPX(filename)
filename = "GPXprueba/r7.gpx"
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele|//rtept/ele", XML::xmlValue))
times <-   XML::xpathSApply(pfile, path = "//trkpt/time|//rtept/time", XML::xmlValue)
coords <- XML::xpathSApply(pfile, path = "//trkpt|//rtept", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
stream <- data.frame(lat = lats, lon = lons)
if(length(eles)>0){
stream$ele = eles
}
pfile
length(eles)
length(eles) == length(lats)
read_GPX <- function(filename){
pfile <- XML::htmlTreeParse(file = filename,
error = function(...) { },
useInternalNodes = T)
eles <-    as.numeric(XML::xpathSApply(pfile, path = "//trkpt/ele|//rtept/ele", XML::xmlValue))
times <-   XML::xpathSApply(pfile, path = "//trkpt/time|//rtept/time", XML::xmlValue)
coords <- XML::xpathSApply(pfile, path = "//trkpt|//rtept", XML::xmlAttrs)
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
stream <- data.frame(lat = lats, lon = lons)
if(length(eles) == length(lats)){
stream$ele = eles
}
if(length(times) == length(lats)){
stream$time = lubridate::as_datetime(times)
}
return(stream)
}
gpxs <- paste0("GPXprueba/",list.files("GPXprueba", "*.gpx"))
for(filename in gpxs){
file1 <-  tryCatch(
{
read_GPX(filename)
},
error = function(cond){
message(filename)
})
}
library(GPStream)
pacman::p_load(GPStream)
act_metadata <- strava_metadata
act_streams <- strava_streams
act_metadata <- strava_metadata
act_streams <- strava_streams
gpx_stream <- read_stream_file("inst/extdata/activity.gpx")
gpx_stream <- read_stream_file("/inst/extdata/activity.gpx")
gpx_stream <- read_stream_file("inst/extdata/activity.gpx")
getwd()
library(GPStream)
gpx_stream <- read_stream_file("inst/extdata/activity.gpx")
str(act_streams)
str(gpx_stream)
fit_stream <- read_stream_file("inst/extdata/activity.fit")
clean_stream3 <- fit_stream %>% rename_stream()
clean_stream1 <- act_streams %>% rename_stream()
clean_stream2 <- gpx_stream %>% rename_stream()
clean_stream3 <- fit_stream %>% rename_stream()
library(GPStream)
fit_stream <- read_stream_file("inst/extdata/activity.fit")
clean_stream3 <- fit_stream %>% rename_stream()
str(clean_stream2)
#' Rename GPS streams according to convention long, lat, elev, timestamp and time. If variable time is missing, the algorithm will aggregate a variable 'time' defined as seconds from start.
#' The algorithm identify some typical names for longitude, latitude, elevation and time. Then raname variables, order it and return a dataframe. If some of this variables is missing or dosen't have a typical name, the return will only have renamed entry variables.
#'
#' @param data is a dataframe or tibble containing a GPS stream. The stream dataframe can be obtained from rStrva library.(see rStrava documentation)
#'
#' rename_stream()
#'
#' @return dataframe stream with 'lon', 'lat', 'ele' and 'time' variables.
#' @export
#'
rename_stream <- function(data){
# rename variables as convention long, lat, elev, timestamp
data <- plyr::rename(data,c("position_long"="lon","lng"="lon","long"="lon","longitude"="lon"),warn_missing=F)
data <- plyr::rename(data,c("position_lat"="lat","latitude"="lat"),warn_missing=F)
data <- plyr::rename(data,c("elev"="ele","altitude"="ele"),warn_missing=F)
if(is.character(data$time)){
data <- plyr::rename(data,c("time"="timestamp"),warn_missing=F)
# time is defined as seconds from start
data$time <- as.numeric(lubridate::as_datetime(data$timestamp) -
min(lubridate::as_datetime(data$timestamp)))
}
data <- data %>% dplyr::relocate(lon, lat, ele)
# reorder renamed columns to the front
columnas_aux <- c("time",colnames(data)[!colnames(data) %in% c("lon","lat","ele", "time")])
data <- cbind(data[,c("lon","lat","ele")],
data[,c(columnas_aux)])
# return uniformed stream
return(data)
}
clean_stream2 <- gpx_stream %>% rename_stream()
str(clean_stream2)
#' Rename GPS streams according to convention long, lat, elev, timestamp and time. If variable time is missing, the algorithm will aggregate a variable 'time' defined as seconds from start.
#' The algorithm identify some typical names for longitude, latitude, elevation and time. Then raname variables, order it and return a dataframe. If some of this variables is missing or dosen't have a typical name, the return will only have renamed entry variables.
#'
#' @param data is a dataframe or tibble containing a GPS stream. The stream dataframe can be obtained from rStrva library.(see rStrava documentation)
#'
#' rename_stream()
#'
#' @return dataframe stream with 'lon', 'lat', 'ele' and 'time' variables.
#' @export
#'
rename_stream <- function(data){
# rename variables as convention long, lat, elev, timestamp
data <- plyr::rename(data,c("position_long"="lon","lng"="lon","long"="lon","longitude"="lon"),warn_missing=F)
data <- plyr::rename(data,c("position_lat"="lat","latitude"="lat"),warn_missing=F)
data <- plyr::rename(data,c("elev"="ele","altitude"="ele"),warn_missing=F)
if(is.character(data$time)){
data <- plyr::rename(data,c("time"="timestamp"),warn_missing=F)
# time is defined as seconds from start
data$time <- as.numeric(lubridate::as_datetime(data$timestamp) -
min(lubridate::as_datetime(data$timestamp)))
}
data <- data %>% dplyr::relocate(lon, lat, ele)
# reorder renamed columns to the front
# columnas_aux <- c("time",colnames(data)[!colnames(data) %in% c("lon","lat","ele", "time")])
#
# data <- cbind(data[,c("lon","lat","ele")],
#               data[,c(columnas_aux)])
# return uniformed stream
return(data)
}
clean_stream2 <- gpx_stream %>% rename_stream()
str(clean_stream2)
#' Rename GPS streams according to convention long, lat, elev, timestamp and time. If variable time is missing, the algorithm will aggregate a variable 'time' defined as seconds from start.
#' The algorithm identify some typical names for longitude, latitude, elevation and time. Then raname variables, order it and return a dataframe. If some of this variables is missing or dosen't have a typical name, the return will only have renamed entry variables.
#'
#' @param data is a dataframe or tibble containing a GPS stream. The stream dataframe can be obtained from rStrva library.(see rStrava documentation)
#'
#' rename_stream()
#'
#' @return dataframe stream with 'lon', 'lat', 'ele' and 'time' variables.
#' @export
#'
rename_stream <- function(data){
# rename variables as convention long, lat, elev, timestamp
data <- plyr::rename(data,c("position_long"="lon","lng"="lon","long"="lon","longitude"="lon"),warn_missing=F)
data <- plyr::rename(data,c("position_lat"="lat","latitude"="lat"),warn_missing=F)
data <- plyr::rename(data,c("elev"="ele","altitude"="ele"),warn_missing=F)
if(is.character(data$time)){
data <- plyr::rename(data,c("time"="timestamp"),warn_missing=F)
# time is defined as seconds from start
data$time <- as.numeric(lubridate::as_datetime(data$timestamp) -
min(lubridate::as_datetime(data$timestamp)))
}
data <- data %>% dplyr::relocate(lon, lat, ele, time, cad)
# reorder renamed columns to the front
# columnas_aux <- c("time",colnames(data)[!colnames(data) %in% c("lon","lat","ele", "time")])
#
# data <- cbind(data[,c("lon","lat","ele")],
#               data[,c(columnas_aux)])
# return uniformed stream
return(data)
}
clean_stream2 <- gpx_stream %>% rename_stream()
clean_stream2 <- gpx_stream %>% rename_stream()
library(GPStream)
clean_stream2 <- gpx_stream %>% rename_stream()
rm(rename_stream()))
rm(rename_stream)
clean_stream2 <- gpx_stream %>% rename_stream()
str(clean_stream2)
exists(clean_stream1$long)
exists(clean_stream1$lon)
? exists
exists("time", clean_stream1)
#' Rename GPS streams according to convention long, lat, elev, timestamp and time. If variable time is missing, the algorithm will aggregate a variable 'time' defined as seconds from start.
#' The algorithm identify some typical names for longitude, latitude, elevation and time. Then raname variables, order it and return a dataframe. If some of this variables is missing or dosen't have a typical name, the return will only have renamed entry variables.
#'
#' @param data is a dataframe or tibble containing a GPS stream. The stream dataframe can be obtained from rStrva library.(see rStrava documentation)
#'
#' rename_stream()
#'
#' @return dataframe stream with 'lon', 'lat', 'ele' and 'time' variables.
#' @export
#'
rename_stream <- function(data){
# rename variables as convention long, lat, elev, timestamp
data <- plyr::rename(data,c("position_long"="lon","lng"="lon","long"="lon","longitude"="lon"),warn_missing=F)
data <- plyr::rename(data,c("position_lat"="lat","latitude"="lat"),warn_missing=F)
data <- plyr::rename(data,c("elev"="ele","altitude"="ele"),warn_missing=F)
if(exists("time", data)){
if(!is.numeric(data$time)){
data <- plyr::rename(data,c("time"="timestamp"),warn_missing=F)
# time is defined as seconds from start
data$time <- as.numeric(lubridate::as_datetime(data$timestamp) -
min(lubridate::as_datetime(data$timestamp)))
}
}
# reorder renamed columns to the front
data <- data %>% dplyr::relocate(lon, lat)
# return uniformed stream
return(data)
}
clean_stream2 <- gpx_stream %>% rename_stream()
str(clean_stream2)
correct_elevation <- clean_stream2 %>% ele_correction()
correct_elevation <- clean_stream2 %>% ele_correction(replace = FALSE)
ggplot(correct_elevation, aes(x=time)) + geom_line(aes(y=ele)) + geom_line(aes(y=ele_DEM))
p_load(tidyverse)
pacman::p_load(tidyverse)
ggplot(correct_elevation, aes(x=time)) + geom_line(aes(y=ele)) + geom_line(aes(y=ele_DEM))
ggplot(correct_elevation, aes(x=time)) + geom_line(aes(y=ele)) + geom_line(aes(y=ele_DEM), col="red")
smooth_act <- correct_elevation %>% smooth_stream(interpolate = TRUE)
View(smooth_act)
rm(rename_stream)
library(GPStream)
smooth_act <- correct_elevation %>% smooth_stream(interpolate = TRUE)
ggplot(correct_elevation, aes(lon, lat)) +
geom_line() +
geom_line(data = smooth_act, col="red")
ggplot(correct_elevation, aes(lon, lat)) +
geom_point() +
geom_line(data = smooth_act, col="red")
ggplot(correct_elevation, aes(lon, lat)) +
geom_point() +
geom_point(data = smooth_act, col="red")
smooth_act <- correct_elevation %>% smooth_stream(interpolate = TRUE, alpha = 0.01)
ggplot(correct_elevation, aes(lon, lat)) +
geom_point() +
geom_point(data = smooth_act, col="red")
smooth_act <- correct_elevation %>% smooth_stream(interpolate = TRUE, alpha = 0.02)
ggplot(correct_elevation, aes(lon, lat)) +
geom_point() +
geom_point(data = smooth_act, col="red")
smooth_act <- correct_elevation %>% smooth_stream(interpolate = TRUE, alpha = 0.03)
smooth_act <- correct_elevation %>% smooth_stream(interpolate = TRUE, alpha = 0.03)
ggplot(correct_elevation, aes(lon, lat)) +
geom_point() +
geom_point(data = smooth_act, col="red")
smooth_act <- correct_elevation %>% smooth_stream(interpolate = TRUE, alpha = 0.05)
ggplot(correct_elevation, aes(lon, lat)) +
geom_point() +
geom_point(data = smooth_act, col="red")
diff_stream <- smooth_act %>% differential_stream()
View(diff_stream)
str(diff_stream)
clean_stream <-
read_stream_file("inst/extdata/activity.gpx") %>%
rename_stream() %>%
ele_correction(replace = FALSE) %>%
smooth_stream(interpolate = FALSE, alpha = 0.05) %>%
differential_stream()
clean_stream <-
read_stream_file("inst/extdata/activity.gpx") %>%
rename_stream() %>%
ele_correction(replace = FALSE) %>%
smooth_stream(interpolate = FALSE, alpha = 0.05) %>%
differential_stream()
clean_stream <-
read_stream_file("inst/extdata/activity.gpx") %>%
rename_stream() %>%
ele_correction(replace = FALSE) %>%
smooth_stream(interpolate = FALSE, alpha = 0.05) %>%
differential_stream()
ggplot(clean_stream, aes(lon,lat)) +
geom_point(aes(size=hz_velocity, col=vert_velocity))
ggplot(clean_stream, aes(lon,lat)) +
geom_point(aes(size=hz_velocity, col=vert_velocity)) +
theme_void()
clean_stream <-
read_stream_file("inst/extdata/activity.fit") %>%
rename_stream() %>%
ele_correction(replace = FALSE) %>%
smooth_stream(interpolate = FALSE, alpha = 0.05) %>%
differential_stream()
clean_stream <-
read_stream_file("inst/extdata/activity.fit") %>%
rename_stream() %>%
ele_correction(replace = FALSE) %>%
smooth_stream(interpolate = FALSE, alpha = 0.05) %>%
differential_stream()
ggplot(clean_stream, aes(lon,lat)) +
geom_point(aes(size=hz_velocity, col=vert_velocity)) +
theme_void()
colnames(clean_stream)
stream_df <- FITfileR::records(file_data) %>% tibble::as_tibble()
clean_stream <-
read_stream_file("inst/extdata/activity.fit") %>%
rename_stream() %>%
ele_correction(replace = FALSE) %>%
smooth_stream(interpolate = FALSE, alpha = 0.05) %>%
differential_stream()
ggplot(clean_stream, aes(lon,lat)) +
geom_point(aes(size=hz_velocity, col=vert_velocity)) +
theme_void()
ggplot(clean_stream, aes(x=lon,y=lat)) +
geom_point(aes(size=hz_velocity, col=vert_velocity)) +
theme_void()
ggplot(clean_stream, aes(lon,lat)) +
geom_point() +
theme_void()
is.numeric(fit_stream$time)
is.numeric.difftime(fit_stream$time)
is.numeric.POSIXt(fit_stream$time)
is.numeric.POSIXt(fit_stream$timestamp)
library(GPStream)
clean_stream <-
read_stream_file("inst/extdata/activity.fit") %>%
rename_stream() %>%
ele_correction(replace = FALSE) %>%
smooth_stream(interpolate = FALSE, alpha = 0.05) %>%
differential_stream()
clean_stream <-
read_stream_file("inst/extdata/activity.fit") %>%
rename_stream()
clean_stream <-
read_stream_file("inst/extdata/activity.fit") %>%
rename_stream() %>%
ele_correction(replace = FALSE)
clean_stream <-
read_stream_file("inst/extdata/activity.fit") %>%
rename_stream() %>%
ele_correction(replace = FALSE) %>%
smooth_stream(interpolate = FALSE, alpha = 0.05) %>%
differential_stream()
library(GPStream)
clean_stream <-
read_stream_file("inst/extdata/activity.fit") %>%
rename_stream() %>%
ele_correction(replace = FALSE) %>%
smooth_stream(interpolate = FALSE, alpha = 0.05) %>%
differential_stream()
ggplot(clean_stream, aes(lon,lat)) +
geom_point(aes(size=hz_velocity, col=vert_velocity)) +
theme_void()
ggplot(clean_stream, aes(lon,lat)) +
geom_point(aes(size=hz_velocity, col=vert_velocity))
library(GPStream)
